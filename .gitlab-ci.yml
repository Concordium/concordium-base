image: 192549843005.dkr.ecr.eu-west-1.amazonaws.com/concordium/base:0.17

stages:
  - lint
  - test

.generic:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    LD_LIBRARY_PATH: "${CI_PROJECT_DIR}/rust-src/target/release:$LD_LIBRARY_PATH"
    RUSTFLAGS: -Dwarnings
  before_script:
    - if [ -d .stack ]; then
         echo "restore stack folder";
         if [ -d $HOME/.stack ]; then
            rm -rf $HOME/.stack;
         fi;
         mv .stack $HOME/;
      fi
    - if [ -d .cargo ]; then
         echo "restore stack folder";
         if [ -d $HOME/.cargo ]; then
            rm -rf $HOME/.cargo;
         fi;
         mv .cargo $HOME/;
      fi
  after_script:
    - mv $HOME/.stack ./
    - mv $HOME/.cargo ./
  cache:
    paths:
      # cache haskell dependencies
      - .stack
      # cache haskell artifacts
      - .stack-work
      # cache rust dependencies
      - .cargo
      # cache rust artifacts
      - rust-src/target
      - rust-bins/target
      - idiss/target
      - mobile_wallet/target
      - identity-provider-service/target
  interruptible: true

# NOTE:
# Gitlab CI doesn't allow merging arrays when extending jobs, so we are forced
# to duplicate the general structure of rules in every job. Ideally we should
# be able to do something like:
#
#     .generic:
#       rules: A
#
#     job:
#       extends: .generic
#       rules: B
#
# And it would result in a job that combines both rules A and B or even better,
# that executes B and if successful then executes A, but that is not the case,
# see: https://docs.gitlab.com/ee/ci/yaml/#merge-details
#
# Explanations for each of the rules are given in the first job.

##################################### LINT #####################################

"lint:fmt":
  extends: .generic
  stage: lint
  image: 192549843005.dkr.ecr.eu-west-1.amazonaws.com/concordium/rustfmt:0.17
  cache: {}
  artifacts: {}
  rules:
    # Always run pipeline in master branch
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes: &files-fmt
        - "**/*.rs"
    # Run pipeline if on a merge request which is not a draft
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" &&
           $CI_MERGE_REQUEST_TITLE !~ /^WIP:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^wip:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^Draft:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^draft:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^Wip:/'
      changes: *files-fmt
    # To avoid duplicated pipelines, when we are pushing to a branch it will not
    # create pipelines, but instead we need to put this into an MR, which would
    # either trigger the rule above of below this one.
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    # Otherwise, create the pipeline to be run manually if wanted
    # and if an error happens, as this is a testing branch, keep running
    - changes: *files-fmt
      when: manual
      allow_failure: true
  script:
    - cargo fmt --manifest-path rust-src/Cargo.toml --all -- --color=always
    - cargo fmt --manifest-path rust-bins/Cargo.toml -- --color=always
    - cargo fmt --manifest-path idiss/Cargo.toml -- --color=always
    - cargo fmt --manifest-path mobile_wallet/Cargo.toml -- --color=always
    - cargo fmt --manifest-path identity-provider-service/Cargo.toml -- --color=always
    - test $(git ls-files --modified | grep -v ".dll$" | grep -v ".a$" | grep -v ".pc$" | grep -v ".def$" | wc -l) -eq 0 || (echo 'You have introduced some unformatted code:'; git ls-files --modified | grep -v ".dll$" | grep -v ".a$" | grep -v ".pc$" | grep -v ".def$" | sed 's/^/* /'; echo 'Please run `cargo fmt` and amend your MR.'; exit 1)

"lint:clippy":
  extends: .generic
  stage: lint
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes: &files-clippy
        - "**/Cargo.toml"
        - "**/*.rs"
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" &&
           $CI_MERGE_REQUEST_TITLE !~ /^WIP:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^wip:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^Draft:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^draft:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^Wip:/'
      changes: *files-clippy
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - when: manual
      changes: *files-clippy
      allow_failure: true
  script:
    - cargo clippy --manifest-path rust-src/Cargo.toml --color=always --all
    - cargo clippy --manifest-path rust-bins/Cargo.toml --color=always --all --features=vendored-ssl
    - cargo clippy --manifest-path idiss/Cargo.toml --color=always
    - cargo clippy --manifest-path mobile_wallet/Cargo.toml --color=always
    - cargo clippy --manifest-path identity-provider-service/Cargo.toml --color=always --all --features=vendored-ssl

#################################### TEST #####################################

"cargo:build-bench":
  extends: .generic
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes: &files-cargo-bench
        - "**/Cargo.toml"
        - "**/*.rs"
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" &&
           $CI_MERGE_REQUEST_TITLE !~ /^WIP:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^wip:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^Draft:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^draft:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^Wip:/'
      changes: *files-cargo-bench
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - when: manual
      changes: *files-cargo-bench
      allow_failure: true
  script:
    - cargo bench --manifest-path rust-src/Cargo.toml --color=always --no-run

"cargo:test":
  extends: .generic
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes: &files-cargo-test
        - "**/Cargo.toml"
        - "**/*.rs"
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" &&
           $CI_MERGE_REQUEST_TITLE !~ /^WIP:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^wip:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^Draft:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^draft:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^Wip:/'
      changes: *files-cargo-test
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - when: manual
      changes: *files-cargo-test
      allow_failure: true
  script:
    - cargo test --manifest-path rust-src/Cargo.toml --all --verbose --release --color=always

"cargo:test-id-service":
  extends: .generic
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes: &files-cargo-test-id-service
        - "**/Cargo.toml"
        - "**/*.rs"
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" &&
           $CI_MERGE_REQUEST_TITLE !~ /^WIP:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^wip:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^Draft:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^draft:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^Wip:/'
      changes: *files-cargo-test-id-service
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - when: manual
      changes: *files-cargo-test-id-service
      allow_failure: true
  script:
    - cargo test --manifest-path identity-provider-service/Cargo.toml --features=vendored-ssl --all --verbose --release --color=always

"cargo:test-idiss":
  extends: .generic
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes: &files-cargo-test-idiss
        - "**/Cargo.toml"
        - "**/*.rs"
        - "identity-provider-service/data/global.json"
        - "identity-provider-service/data/valid_request.json"
        - "identity-provider-service/data/anonymity_revokers.json"
        - "identity-provider-service/data/identity_provider.pub.json"
        - "idiss/*"
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" &&
           $CI_MERGE_REQUEST_TITLE !~ /^WIP:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^wip:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^Draft:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^draft:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^Wip:/'
      changes: *files-cargo-test-idiss
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - when: manual
      changes: *files-cargo-test-idiss
      allow_failure: true
  script:
    - cargo build --manifest-path idiss/Cargo.toml --release
    - cp idiss/target/release/libidiss.so idiss/libidiss.node
    - cd idiss
    - node example.js

"stack:build-and-test":
  extends: .generic
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes: &files-stack-build
        - "**/Cargo.toml"
        - "**/*.rs"
        - "**/*.yaml"
        - "**/*.hs"
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" &&
           $CI_MERGE_REQUEST_TITLE !~ /^WIP:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^wip:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^Draft:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^draft:/ &&
           $CI_MERGE_REQUEST_TITLE !~ /^Wip:/'
      changes: *files-stack-build
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - when: manual
      changes: *files-stack-build
      allow_failure: true
  script:
    # Setup.hs will build rust-src in release mode and without tests
    # so it is incompatible with cargo:test or lint:clippy. Cargo should
    # be fast enough so that this is acceptable
    - stack --test --bench --stack-yaml stack.yaml bench --no-run-benchmarks

