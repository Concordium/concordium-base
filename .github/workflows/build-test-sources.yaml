# Workflow triggered by pushes to the main & branches and PRs targeting them
# (as long as the commits contain code changes).
#
# Jobs:
# - rustfmt: Checks formatting of the Rust sources using the 'rustfmt'
#            tool. The job is skipped if the workflow was triggered by a
#            PR marked as a draft.
# - fourmolu: Checks formatting of the Haskell sources using the
#             'fourmolu' tool. The job is skipped if the workflow was
#             triggered by a PR marked as a draft.
# - build-test: Build and test both the Haskell and Rust sources.
#               The job is skipped if the workflow was triggered by a PR
#               marked as a draft.
#
# The steps in 'build-test' are ordered to fail as fast as possible
# and restore caches as late as possible.
# The dependencies between the steps are described in inline comments below
# along with a few suggestions for improving parallelization.

name: Check format, docs, build and run tests for Haskell and Rust sources

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: main
  workflow_dispatch: # allow manual trigger

env:
  dummy: 1                 # change to force cache invalidation
  ghc: 9.6.6               # used for cache key only, the GHC version actually used is specified in stack.yaml
  rust: 1.82               # used for cache key only, the Rust version actually used is specified in rust-toolchain.toml
  CARGO_TERM_COLOR: always # implicitly adds '--color=always' to all cargo commands

jobs:

  rustfmt:
    runs-on: ubuntu-latest
    name: "Rust: rustfmt"
    if: ${{ !github.event.pull_request.draft }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Run rustfmt
      run: | 
        cargo +nightly-2023-04-01 fmt --manifest-path ${{ matrix.crates }}/Cargo.toml --all -- --check

#        rustup +nightly-2023-04-01 component add rustfmt

  rustdoc:
    runs-on: ubuntu-latest
    name: "Rust: doc"
    if: ${{ !github.event.pull_request.draft }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Run cargo doc
      run: |
        RUSTDOCFLAGS="-D warnings" cargo doc --no-deps --all-features --color=always

  #        rustup component add rust-docs

  fourmolu:
    runs-on: ubuntu-latest
    name: "Haskell: fourmolu"
    if: ${{ !github.event.pull_request.draft }}

    steps:
    - name: Download fourmolu
      uses: supplypike/setup-bin@v1
      with:
        uri: 'https://github.com/fourmolu/fourmolu/releases/download/v0.13.1.0/fourmolu-0.13.1.0-linux-x86_64'
        name: 'fourmolu'
        version: '0.13.1.0'

    - name: Checkout project
      uses: actions/checkout@v4

    - name: Run fourmolu
      run: |
        fourmolu --color always --mode check $(git ls-files '*.hs')

  # This job exists to make sure that concordium-base (the crate) compiles with
  # the version of the compiler stated in its Cargo.toml manifest. We keep this
  # as old as reasonable since we publish it as a library.
  # If this job fails consider carefully whether the new language feature used
  # adds value. If it does bump the rust version here and in Cargo.toml in rust-src/concordium-base
  rust-msrv-compile:
    runs-on: ubuntu-latest
    name: "Rust: check using MSRV"
    if: ${{ !github.event.pull_request.draft }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Check that concordium_base compiles with MSRV.
      run: |
        cargo +1.73 check --locked -p concordium_base

  rust-clippy-test:
    runs-on: ubuntu-latest
    name: "Rust: clippy and test"
    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Cache cargo dependencies and targets
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ env.dummy }}-rust-deps-${{ env.rust }}-${{ hashFiles('**/Cargo.toml', 'Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.dummy }}-rust-deps-${{ env.rust }}
      - name: Install Rust
        run: |
          rustup target add aarch64-linux-android

      #          rustup component add clippy

      - name: Run clippy
        run: |
          cargo clippy --all-targets --all-features -- -D warnings
      - name: Run tests
        run: |
          cargo test --locked --all-features --release
      - name: Check mobile_wallet on Android compile target
        run: |
          cargo check --locked --all-features --all-targets -p mobile_wallet --target aarch64-linux-android
# todo ar check haskell rust dep build
  haskell-build-test:
    runs-on: ubuntu-latest
    name: "Haskell: build and test"
    if: ${{ !github.event.pull_request.draft }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # Set up Rust and restore dependencies and targets from cache.
    # This must be done before checking the Rust sources.
    - name: Cache cargo dependencies and targets
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rust-src/target
          rust-bins/target
          identity-provider-service/target
          idiss/target
          mobile_wallet/target
          lib
        key: ${{ runner.os }}-${{ env.dummy }}-rust-deps-${{ matrix.plan.rust }}-${{ hashFiles('**/Cargo.toml', 'Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.dummy }}-rust-deps-${{ matrix.plan.rust }}

    # HASKELL #

    # Set up Haskell by caching '~/.stack', '.stack-work', and '~/.local/bin' separately.
    # This must be done before compiling the Haskell sources
    # (which in turns compiles the Rust sources).
    # The cache entry keys depend on the GHC version and contents of 'package.yaml' and 'stack.yaml'
    # but will fall back to cache entries from different versions if no match is found.
    - name: Cache stack global package DB
      id: stack-global
      uses: actions/cache@v4
      with:
        path: ~/.stack
        key: ${{ runner.os }}-${{ env.dummy }}-stack-global-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.dummy }}-stack-global-${{ matrix.plan.ghc }}
    - name: Cache stack-installed programs in '~/.local/bin'
      id: stack-programs
      uses: actions/cache@v4
      with:
        path: ~/.local/bin
        key: ${{ runner.os }}-${{ env.dummy }}-stack-programs-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.dummy }}-stack-programs-${{ matrix.plan.ghc }}
    - name: Cache '.stack-work'
      uses: actions/cache@v4
      with:
        path: .stack-work
        key: ${{ runner.os }}-${{ env.dummy }}-stack-work-${{ matrix.plan.ghc }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.dummy }}-stack-work-${{ matrix.plan.ghc }}

    - name: Install GHC (unless it was cached)
      if: steps.stack-programs.outputs.cache-hit != 'true' || steps.stack-global.outputs.cache-hit != 'true'
      run: |
        stack setup --install-ghc

    - name: Install protoc
      run: |
        wget https://github.com/protocolbuffers/protobuf/releases/download/v3.15.3/protoc-3.15.3-linux-x86_64.zip
        unzip protoc-3.15.3-linux-x86_64.zip
        sudo mv ./bin/protoc /usr/bin/protoc

    - name: Build haskell dependencies (unless they were cached)
      if: steps.stack-programs.outputs.cache-hit != 'true' || steps.stack-global.outputs.cache-hit != 'true'
      run: |
        stack build --test --bench --only-dependencies

    # Compile Rust and Haskell sources.
    # Must be done before running any tests.
    - name: Build all Haskell components
      run: |
        stack build --test --bench --force-dirty --ghc-options=-split-sections --no-run-tests --no-run-benchmarks --ghc-options "-Werror"

    # Run Rust and Haskell tests. Could run in parallel in separate jobs.
    - name: Test haskell
      run: |
        stack build --test --bench --ghc-options=-split-sections --no-run-benchmarks
