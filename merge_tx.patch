diff --git a/concordium-grpc-api b/concordium-grpc-api
--- a/concordium-grpc-api
+++ b/concordium-grpc-api
@@ -1 +1 @@
-Subproject commit f766c2db6f27620aebde9c4cfefa509386fd256a
+Subproject commit f766c2db6f27620aebde9c4cfefa509386fd256a-dirty
diff --git a/haskell-src/Concordium/GRPC2.hs b/haskell-src/Concordium/GRPC2.hs
index 43be10d5..91284e0f 100644
--- a/haskell-src/Concordium/GRPC2.hs
+++ b/haskell-src/Concordium/GRPC2.hs
@@ -776,10 +776,7 @@ instance ToProto RejectReason where
         PoolWouldBecomeOverDelegated -> Proto.make $ ProtoFields.poolWouldBecomeOverDelegated .= Proto.defMessage
         PoolClosed -> Proto.make $ ProtoFields.poolClosed .= Proto.defMessage
         NonExistentTokenId tokenId -> Proto.make $ ProtoFields.nonExistentTokenId .= toProto tokenId
-        TokenHolderTransactionFailed reason -> Proto.make $ ProtoFields.tokenHolderTransactionFailed .= toProto reason
-        TokenGovernanceTransactionFailed reason -> Proto.make $ ProtoFields.tokenGovernanceTransactionFailed .= toProto reason
-        UnauthorizedTokenGovernance tokenId -> Proto.make $ ProtoFields.unauthorizedTokenGovernance .= toProto tokenId
-
+        TokenTransactionFailed reason -> Proto.make $ ProtoFields.tokenHolderTransactionFailed .= toProto reason
 -- | Attempt to convert the node's TransactionStatus type into the protobuf BlockItemStatus type.
 --   The protobuf type is better structured and removes the need for handling impossible cases.
 --   For example the case of an account transfer resulting in a smart contract update, which is a
@@ -1664,20 +1661,13 @@ convertAccountTransaction ty cost sender result = case ty of
                             _ -> Left CEInvalidTransactionResult
                     v <- mapM toDelegationEvent events
                     Right . Proto.make $ ProtoFields.delegationConfigured . ProtoFields.events .= v
-            TTTokenHolder ->
+            TTTokenUpdate ->
                 mkSuccess <$> do
                     protoEvents <-
                         left (const CEInvalidTransactionResult) $
                             mapM tokenHolderEventToProto events
                     Right . Proto.make $
                         ProtoFields.tokenHolderEffect . ProtoFields.events .= protoEvents
-            TTTokenGovernance ->
-                mkSuccess <$> do
-                    protoEvents <-
-                        left (const CEInvalidTransactionResult) $
-                            mapM tokenHolderEventToProto events
-                    Right . Proto.make $
-                        ProtoFields.tokenGovernanceEffect . ProtoFields.events .= protoEvents
   where
     mkSuccess :: Proto.AccountTransactionEffects -> Proto.AccountTransactionDetails
     mkSuccess effects = Proto.make $ do
@@ -1763,8 +1753,7 @@ instance ToProto TransactionType where
     toProto TTTransferWithScheduleAndMemo = Proto.TRANSFER_WITH_SCHEDULE_AND_MEMO
     toProto TTConfigureBaker = Proto.CONFIGURE_BAKER
     toProto TTConfigureDelegation = Proto.CONFIGURE_DELEGATION
-    toProto TTTokenHolder = Proto.TOKEN_HOLDER
-    toProto TTTokenGovernance = Proto.TOKEN_GOVERNANCE
+    toProto TTTokenUpdate = Proto.TOKEN_UPDATE
 
 instance ToProto Energy where
     type Output Energy = Proto.Energy
diff --git a/haskell-src/Concordium/Types/Execution.hs b/haskell-src/Concordium/Types/Execution.hs
index 5cf7e796..6bbd1d18 100644
--- a/haskell-src/Concordium/Types/Execution.hs
+++ b/haskell-src/Concordium/Types/Execution.hs
@@ -377,19 +377,12 @@ data Payload
           cdDelegationTarget :: !(Maybe DelegationTarget)
         }
     | -- | An update for a protocol level token.
-      TokenHolder
+      TokenUpdate
         { -- | Identifier of the token type to which the transaction refers.
           thTokenId :: !TokenId,
           -- | The CBOR-encoded operations to perform.
           thOperations :: !TokenParameter
         }
-    | -- | A governance update for a protocol level token.
-      TokenGovernance
-        { -- | Identifier of the token type to which the transaction refers.
-          tgTokenId :: !TokenId,
-          -- | The CBOR-encoded operations to perform.
-          tgOperations :: !TokenParameter
-        }
     deriving (Eq, Show)
 
 -- Define `TransactionType`  and relevant conversion function to convert from/to `Payload`.
@@ -426,8 +419,7 @@ instance S.Serialize TransactionType where
         TTTransferWithScheduleAndMemo -> S.putWord8 18
         TTConfigureBaker -> S.putWord8 19
         TTConfigureDelegation -> S.putWord8 20
-        TTTokenHolder -> S.putWord8 21
-        TTTokenGovernance -> S.putWord8 22
+        TTTokenUpdate -> S.putWord8 21
 
     get =
         S.getWord8 >>= \case
@@ -452,8 +444,7 @@ instance S.Serialize TransactionType where
             18 -> return TTTransferWithScheduleAndMemo
             19 -> return TTConfigureBaker
             20 -> return TTConfigureDelegation
-            21 -> return TTTokenHolder
-            22 -> return TTTokenGovernance
+            21 -> return TTTokenUpdate
             n -> fail $ "Unrecognized TransactionType tag: " ++ show n
 
 instance AE.ToJSON Payload where
@@ -576,17 +567,10 @@ instance AE.ToJSON Payload where
               "proofAggregation" AE..= ubkProofAggregation,
               "transactionType" AE..= AE.String "updateBakerKeys"
             ]
-    toJSON TokenHolder{..} =
+    toJSON TokenUpdate{..} =
         AE.object
             [ "tokenId" AE..= thTokenId,
-              "operations" AE..= EncodedTokenOperations thOperations,
-              "transactionType" AE..= AE.String "tokenHolder"
-            ]
-    toJSON TokenGovernance{..} =
-        AE.object
-            [ "tokenId" AE..= tgTokenId,
-              "operations" AE..= tgOperations,
-              "transactionType" AE..= AE.String "tokenGovernance"
+              "operations" AE..= EncodedTokenOperations thOperations
             ]
 
 instance AE.FromJSON Payload where
@@ -696,14 +680,10 @@ instance AE.FromJSON Payload where
                 cdRestakeEarnings <- obj AE..: "restakeEarnings"
                 cdDelegationTarget <- obj AE..: "delegationTarget"
                 return ConfigureDelegation{..}
-            "tokenHolder" -> do
+            "tokenUpdate" -> do
                 thTokenId <- obj AE..: "tokenId"
                 (EncodedTokenOperations thOperations) <- obj AE..: "operations"
-                return TokenHolder{..}
-            "tokenGovernance" -> do
-                tgTokenId <- obj AE..: "tokenId"
-                tgOperations <- obj AE..: "operations"
-                return TokenGovernance{..}
+                return TokenUpdate{..}
             _ -> fail "Unrecognized 'TransactionType' tag"
 
 -- | Payload serialization according to
@@ -843,14 +823,10 @@ putPayload ConfigureDelegation{..} = do
         bitFor 0 cdCapital
             .|. bitFor 1 cdRestakeEarnings
             .|. bitFor 2 cdDelegationTarget
-putPayload TokenHolder{..} = do
+putPayload TokenUpdate{..} = do
     S.putWord8 27
     S.put thTokenId
     S.put thOperations
-putPayload TokenGovernance{..} = do
-    S.putWord8 28
-    S.put tgTokenId
-    S.put tgOperations
 
 -- | Set the given bit if the value is a 'Just'.
 bitFor :: (Bits b) => Int -> Maybe a -> b
@@ -1016,14 +992,10 @@ getPayload spv size = S.isolate (fromIntegral size) (S.bytesRead >>= go)
                 cdRestakeEarnings <- maybeGet 1
                 cdDelegationTarget <- maybeGet 2
                 return ConfigureDelegation{..}
-            27 | supportProtocolLevelTokens -> S.label "TokenHolder" $ do
+            27 | supportProtocolLevelTokens -> S.label "TokenUpdate" $ do
                 thTokenId <- S.get
                 thOperations <- S.get
-                return TokenHolder{..}
-            28 | supportProtocolLevelTokens -> S.label "TokenGovernance" $ do
-                tgTokenId <- S.get
-                tgOperations <- S.get
-                return TokenGovernance{..}
+                return TokenUpdate{..}
             n -> fail $ "unsupported transaction type '" ++ show n ++ "'"
     supportMemo = supportsMemo spv
     supportDelegation = protocolSupportsDelegation spv
@@ -2801,12 +2773,8 @@ data RejectReason
       PoolClosed
     | -- | Token ID does not exist.
       NonExistentTokenId !TokenId
-    | -- | The token-holder transaction was rejected.
-      TokenHolderTransactionFailed !TokenModuleRejectReason
-    | -- | The token-governance transaction was rejected.
-      TokenGovernanceTransactionFailed !TokenModuleRejectReason
-    | -- | Account sending the transaction is not authorized for governing the token.
-      UnauthorizedTokenGovernance !TokenId
+    | -- | The token transaction was rejected.
+      TokenTransactionFailed !TokenModuleRejectReason
     deriving (Show, Eq, Generic)
 
 wasmRejectToRejectReasonInit :: Wasm.ContractExecutionFailure -> RejectReason
@@ -2879,10 +2847,7 @@ instance S.Serialize RejectReason where
         PoolWouldBecomeOverDelegated -> S.putWord8 53
         PoolClosed -> S.putWord8 54
         NonExistentTokenId tokenId -> S.putWord8 55 <> S.put tokenId
-        TokenHolderTransactionFailed reason -> S.putWord8 56 <> S.put reason
-        TokenGovernanceTransactionFailed reason -> S.putWord8 57 <> S.put reason
-        UnauthorizedTokenGovernance tokenId -> S.putWord8 58 <> S.put tokenId
-
+        TokenTransactionFailed reason -> S.putWord8 56 <> S.put reason
     get =
         S.getWord8 >>= \case
             0 -> return ModuleNotWF
@@ -2950,9 +2915,7 @@ instance S.Serialize RejectReason where
             53 -> return PoolWouldBecomeOverDelegated
             54 -> return PoolClosed
             55 -> NonExistentTokenId <$> S.get
-            56 -> TokenHolderTransactionFailed <$> S.get
-            57 -> TokenGovernanceTransactionFailed <$> S.get
-            58 -> UnauthorizedTokenGovernance <$> S.get
+            56 -> TokenTransactionFailed <$> S.get
             n -> fail $ "Unrecognized RejectReason tag: " ++ show n
 
 instance AE.ToJSON RejectReason
