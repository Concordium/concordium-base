diff --git a/haskell-src/Concordium/GRPC2.hs b/haskell-src/Concordium/GRPC2.hs
index f6257a44..5d25f0d2 100644
--- a/haskell-src/Concordium/GRPC2.hs
+++ b/haskell-src/Concordium/GRPC2.hs
@@ -662,7 +662,6 @@ instance ToProto TokenState where
     type Output TokenState = Proto.TokenState
     toProto TokenState{..} = Proto.make $ do
         PLTFields.tokenModuleRef .= toProto tsTokenModuleRef
-        PLTFields.issuer .= toProto tsIssuer
         PLTFields.decimals .= fromIntegral tsDecimals
         PLTFields.totalSupply .= toProto tsTotalSupply
         PLTFields.moduleState .= Proto.make (PLTFields.value .= tsModuleState)
diff --git a/haskell-src/Concordium/Types/Queries/Tokens.hs b/haskell-src/Concordium/Types/Queries/Tokens.hs
index 2e988cd8..8783288e 100644
--- a/haskell-src/Concordium/Types/Queries/Tokens.hs
+++ b/haskell-src/Concordium/Types/Queries/Tokens.hs
@@ -75,8 +75,6 @@ instance FromJSON TokenAccountState where
 data TokenState = TokenState
     { -- | The reference of the module implementing the token.
       tsTokenModuleRef :: !TokenModuleRef,
-      -- | The governance account for the token.
-      tsIssuer :: !AccountAddress,
       -- | The number of decimals in the token representation.
       tsDecimals :: !Word8,
       -- | The total available token supply.
@@ -88,10 +86,9 @@ data TokenState = TokenState
 
 -- | JSON instances for TokenState
 instance ToJSON TokenState where
-    toJSON (TokenState tsTokenModuleRef tsIssuer tsDecimals tsTotalSupply tsModuleState) =
+    toJSON (TokenState tsTokenModuleRef tsDecimals tsTotalSupply tsModuleState) =
         object
             [ "tokenModuleRef" .= tsTokenModuleRef,
-              "issuer" .= tsIssuer,
               "decimals" .= tsDecimals,
               "totalSupply" .= tsTotalSupply,
               "moduleState" .= ByteStringHex tsModuleState
@@ -100,7 +97,6 @@ instance ToJSON TokenState where
 instance FromJSON TokenState where
     parseJSON = withObject "TokenState" $ \o -> do
         tsTokenModuleRef <- o .: "tokenModuleRef"
-        tsIssuer <- o .: "issuer"
         tsDecimals <- o .: "decimals"
         tsTotalSupply <- o .: "totalSupply"
         (ByteStringHex tsModuleState) <- o .: "moduleState"
